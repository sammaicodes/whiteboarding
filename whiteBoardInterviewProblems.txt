Question #1: Turning Strings to URLs
URLs cannot have spaces. Instead, all spaces in a string are replaced with %20. Write an algorithm that replaces all spaces in a string with %20.

You may not use the replace() method or regular expressions to solve this problem. Solve the problem with and without recursion.

Example
Input: "Jasmine Ann Jones"

Output: "Jasmine%20Ann%20Jones"

Possible steps: 
  1. Split all the individual components of a string into an array.
  2. Check if there are any white spaces.
  3. If there are white spaces, use split/join to replace the white with %20. 
  4. If there are no white spaces, just return the original string.
  5. Return the final answer.

SOLUTION 
let userString = "Jasmine Ann Jones"
function noSpacesAllowed(userString){
let finalUrl
let strElements = userString.split("")      //turn string into elements of an array to check for white spaces for the split/join function to not be undefined
let boOl = strElements.includes(" ")  
  if( boOl === true){                       //boolean, if true (there is white spaces) replace the space with %20
    finalUrl = userString.split(" ").join("%20")
  }
  else{        
    finalUrl = userString
  }
return finalUrl
}


Question #2: Array Deduping
Write an algorithm that removes duplicates from an array. Do not use a function like filter() to solve this. Once you have solved the problem, demonstrate how it can be solved with filter(). Solve the problem with and without recursion.

Example
Input: [7, 9, "hi", 12, "hi" 7, 53]

Output: [7, 9, "hi", 12, 53]

Possible Steps :
  1. Write a for loop to check every index.
  2. At every index, it should check if that element in the array is included elsewhere
  3. If its included, slice it.
  4. it should return an array with no duplicates 

  Attempted soloution that only works for the first duplicate encounter:

let userArray = [7, 9, "hi", 12, "hi", 7, 53]
function removingDuplicates(userArray){
  let noDuplicatesArray
  let elementOne
  for(let i = 0; i < userArray.length; i++){
    elementOne = userArray[i]  //starts at index 0
    if(userArray.includes(elementOne) === true){
      noDuplicatesArray = userArray.splice(i+1)  //slice() starts at 1 not 0 and I started the counter at 0
    }
  }
  return noDuplicatesArray
}

Shorter solution using Set that does work:

1. Convert the array to a Set, A set can only have unique elements.
2. Convert the set to an Array

let userInput = [7, 9, "hi", 12, "hi", 7, 53]
function removingDuplicates(userInput){
  let removed = [...new Set(userInput)]
  return removed
}

Question #3: Compressing Strings
Write an algorithm that takes a string with repeated characters and compresses them, using a number to show how many times the repeated character has been compressed. For instance, aaa would be written as 3a. Solve the problem with and without recursion.

Example
Input: "aaabccdddda"

Output: "3ab2c4da"

Question #3: Compressing Strings
Write an algorithm that takes a string with repeated characters and compresses them, using a number to show how many times the repeated character has been compressed. For instance, aaa would be written as 3a. Solve the problem with and without recursion.

Example
Input: "aaabccdddda"

Output: "3ab2c4da"

Possible Steps:
*********************************************

Question #4: Checking for Uniqueness
Write an algorithm that determines whether all the elements in a string are unique. You may not convert the string into an array or use array methods to solve this problem. The algorithm should return a boolean.

Example
Input: "hello"

Output: false

Input: "copyright"

Output: true

Steps:

1. Fill a Set with all characters of the string and compare its size to the string's length:

Solution:

let expectedFalse = "hello"
let expectedTrue = "copyright"
function onlyUniques(userInput){
  return new Set(userInput).size == userInput.length;
}

Output:
onlyUniques(expectedFalse)-->false
onlyUniques(expectedTrue)-->true